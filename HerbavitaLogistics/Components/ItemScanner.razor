@page "/scan"
@using MudBlazor
@using HerbavitaLogistics.Messages
@using HerbavitaLogistics.Models
@inject AuthState Auth
@inject NavigationManager Nav
@inject IApiService ApiService
@implements IDisposable

<MudPaper Elevation="3" Class="scanner-container">
    <div class="header">
        <MudText Typo="Typo.h6">Logged in as: @Auth.CurrentEmployee?.Name</MudText>
        <MudButton OnClick="Logout" Variant="Variant.Text">Log Out</MudButton>
    </div>

    <div class="scanner-area">
        @if (_lastScan != null)
        {
            <div class="scan-result @(_lastScan.IsValid ? "valid" : "invalid")">
                <MudText Typo="Typo.subtitle1">@_lastScan.ItemCode</MudText>
                <MudText Typo="Typo.body1">@_lastScan.ItemName</MudText>
                @if (!_lastScan.IsValid)
                {
                    <MudAlert Severity="Severity.Error">@_lastScan.Message</MudAlert>
                }
            </div>
        }
        else
        {
            <div class="scan-prompt">
                <MudIcon Icon="@Icons.Material.Filled.BarcodeScanner" Size="Size.Large" />
                <MudText Typo="Typo.body1">Point scanner at item barcode</MudText>
            </div>
        }
    </div>
</MudPaper>

<MudSnackbar @bind-IsVisible="_showDuplicateWarning" Severity="Severity.Warning">
    Duplicate scan detected!
</MudSnackbar>

@code {
    private ItemValidationResult? _lastScan;
    private bool _showDuplicateWarning;
    private Timer? _scanResetTimer;

    protected override void OnInitialized()
    {
        WeakReferenceMessenger.Default.Register<ItemValidatedMessage>(this, HandleValidation);
        WeakReferenceMessenger.Default.Register<ScanRejectedMessage>(this, HandleRejection);
    }

    private void HandleValidation(object recipient, ItemValidatedMessage message)
    {
        _lastScan = message.Result;
        _showDuplicateWarning = false;
        ResetScanDisplayAfterDelay();
        StateHasChanged();
    }

    private void HandleRejection(object recipient, ScanRejectedMessage message)
    {
        _showDuplicateWarning = true;
        ResetScanDisplayAfterDelay();
        StateHasChanged();
    }

    private void ResetScanDisplayAfterDelay()
    {
        _scanResetTimer?.Dispose();
        _scanResetTimer = new Timer(_ =>
        {
            _lastScan = null;
            InvokeAsync(StateHasChanged);
        }, null, 3000, Timeout.Infinite);
    }

    private void Logout()
    {
        Auth.Logout();
        Nav.NavigateTo("/auth");
    }

    public void Dispose()
    {
        _scanResetTimer?.Dispose();
        WeakReferenceMessenger.Default.Unregister<ItemValidatedMessage>(this);
        WeakReferenceMessenger.Default.Unregister<ScanRejectedMessage>(this);
    }
}