@page "/scan"
@inject AuthState Auth
@using MudBlazor
@using HerbavitaLogistics.Messages
@using HerbavitaLogistics.Models
@using HerbavitaLogistics.Services
@using HerbavitaLogistics.Components
@inject IApiService ApiService
@implements IDisposable


<MudPaper Elevation="3">
    <MudText Typo="Typo.h6">Scanning as: @Auth.CurrentEmployee?.Name</MudText>
    <ScanResultDisplay />
    <MudButton OnClick="Logout">Log Out</MudButton>
</MudPaper>


<MudSnackbar @bind-IsVisible="_showDuplicateWarning" Severity="Warning">
    Duplicate scan detected!
</MudSnackbar>

<div class="scan-results">
    @if (_lastScan != null)
    {
        <div class="@(_lastScan.IsValid ? "valid-scan" : "invalid-scan")">
            <p>@_lastScan.ItemCode</p>
            <p>@_lastScan.Message</p>
        </div>
    }
</div>

@code {
    private ItemValidationResult? _lastScan;
    private bool _showDuplicateWarning;

    protected override void OnInitialized()
    {
        WeakReferenceMessenger.Default.Register<ItemValidatedMessage>(this, HandleValidation);
        WeakReferenceMessenger.Default.Register<ScanRejectedMessage>(this, HandleRejection);
    }

    private void HandleValidation(object recipient, ItemValidatedMessage message)
    {
        _lastScan = message.Result;
        StateHasChanged();
    }

    private void HandleRejection(object recipient, ScanRejectedMessage message)
    {
        _showDuplicateWarning = true;
        StateHasChanged();
    }
}
@code {
    private void Logout()
    {
        Auth.Logout();
        Nav.NavigateTo("/auth");
    }
}




<div class="scanner-container">
    <div class="header">
        <MudText Typo="Typo.h6">Logged in as: @_currentUser?.Name</MudText>
        <MudButton @onclick="Logout" Variant="Variant.Text">Log Out</MudButton>
    </div>

    <div class="scanner-area">
        @if (_lastScan != null)
        {
            <div class="scan-result @(_lastScan.IsValid ? "valid" : "invalid")">
                <MudText>@_lastScan.ItemCode</MudText>
                <MudText>@_lastScan.ItemName</MudText>
                <MudText Color="Color.Error">@_lastScan.Message</MudText>
            </div>
        }
        else
        {
            <div class="scan-prompt">
                <MudIcon Icon="@Icons.Material.Filled.BarcodeScanner" Size="Size.Large" />
                <MudText Typo="Typo.body1">Point scanner at item barcode</MudText>
            </div>
        }
    </div>
</div>

@code {
    private UserInfo? _currentUser;
    private ItemScanResult? _lastScan;

    protected override void OnInitialized()
    {
        _currentUser = AuthState.CurrentUser;
        WeakReferenceMessenger.Default.Register<ItemScannedMessage>(this, HandleScan);
    }

    private void HandleScan(object recipient, ItemScannedMessage message)
    {
        _lastScan = message.Result;
        StateHasChanged();
    }

    public void Dispose()
    {
        WeakReferenceMessenger.Default.Unregister<ItemScannedMessage>(this);
    }
}