@page "/auth"
@using MudBlazor
@inject IApiService ApiService
@inject AuthState Auth
@inject NavigationManager Nav
@implements IDisposable

<MudPaper Elevation="3" Class="auth-container">
    <MudText Typo="Typo.h4" Class="text-center mb-4">Scan Your Badge</MudText>

    @if (_isLoading)
    {
        <div class="text-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.body1">Verifying badge...</MudText>
        </div>
    }
    else if (_errorMessage != null)
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">@_errorMessage</MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="ResetScan">
            Try Again
        </MudButton>
    }
    else if (Auth.CurrentEmployee != null)
    {
        <MudAlert Severity="Severity.Success" Class="mb-4">
            Welcome, @Auth.CurrentEmployee.Name
        </MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="NavigateToScanner">
            Continue to Scanning
        </MudButton>
    }
    else
    {
        <div class="text-center">
            <MudIcon Icon="@Icons.Material.Filled.Badge" Size="Size.Large" Class="mb-2" />
            <MudText Typo="Typo.body1">Present your badge to the scanner</MudText>
        </div>
    }
</MudPaper>

@code {
    private bool _isLoading = false;
    private string? _errorMessage = null;

    protected override void OnInitialized()
    {
        MessagingCenter.Subscribe<object, string>(this, "ScanReceived", HandleScan);
    }

    private async void HandleScan(object sender, string scanData)
    {
        if (Auth.CurrentEmployee != null) return;

        _isLoading = true;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await ApiService.ValidateEmployeeAsync(scanData);

            if (result.IsSuccess)
            {
                Auth.Login(result.Employee);
                // Don't navigate here - let UI update first
            }
            else
            {
                _errorMessage = result.ErrorMessage ?? "Invalid badge";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Connection error. Please try again.";
            Console.WriteLine($"Auth error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void ResetScan()
    {
        _errorMessage = null;
        StateHasChanged();
    }

    private void NavigateToScanner()
    {
        Nav.NavigateTo("/scan");
    }

    public void Dispose()
    {
        MessagingCenter.Unsubscribe<object>(this, "ScanReceived");
    }
}